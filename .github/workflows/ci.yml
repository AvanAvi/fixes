name: Java CI with Maven
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Build & test
      run: mvn -B clean verify
    - name: Build Docker image
      run: docker build -t bookstore-management-tdd:${{ github.sha }} .
    - name: Test Docker image
      run: |
        # Start the container
        docker run -d -p 9090:9090 --name bookstore-test bookstore-management-tdd:${{ github.sha }}
        
        # Wait for the application to be ready (max 60 seconds)
        echo "Waiting for application to start..."
        for i in {1..60}; do
          if curl -s http://localhost:9090/actuator/health > /dev/null 2>&1 || curl -s http://localhost:9090 > /dev/null 2>&1; then
            echo "Application is ready after $i seconds!"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "ERROR: Application failed to start within 60 seconds"
            echo "===== Container logs ====="
            docker logs bookstore-test
            echo "=========================="
            docker stop bookstore-test
            docker rm bookstore-test
            exit 1
          fi
          echo "Waiting... ($i/60)"
          sleep 1
        done
        
        # Test the application endpoint
        echo "Testing application..."
        curl --fail http://localhost:9090 || curl --fail http://localhost:9090/actuator/health || exit 1
        echo "Application test successful!"
        
        # Cleanup
        docker stop bookstore-test
        docker rm bookstore-test
    - name: SonarCloud analysis
      run: mvn -B sonar:sonar -Dsonar.token=${{ secrets.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Upload coverage to Coveralls
      run: mvn coveralls:report
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}